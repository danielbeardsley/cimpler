#!/usr/bin/env node

var childProcess = require('child_process'),
httpTrigger    = require('../lib/http-trigger'),
Git            = require('../lib/git'),
git            = new Git(),
build          = {},
args           = require('optimist')
   .demand(1)
   .usage("Examples:\n" +
   "   cimpler build [-b branch-name]   trigger a build on the current repo\n" +
   "   cimpler status                   echo the list of builds in the queue (* means building)")
   .options('command', {
      alias: 'c',
      describe: 'Custom shell command to execute for this build instead of the one from the config file'
   })
   .options('tail', {
      boolean: true,
      default: true,
      describe: '[ or --no-tail ] Blocks until the build is started and tails the log when used with the "build" command.'
   })
   .options('branch', {
      alias: 'b',
      describe: 'Name of the branch to build (defaults to current)'
   })
   .options('verbose', {
      alias: 'v',
      describe: 'Produce more output for the status command. Includes details for each build.'
   })
   .options('port', {
      alias: 'p',
      describe: 'HTTP port of the cimpler server (defaults to the value in config.js)'
   }).argv;

var command = args._[0];

switch (command) {
   case 'build':
      if (args.command) {
         build.buildCommand = args.command;
      }
      git.remote(function(remote, repoPath) {
         build.repo = remote || repoPath;
         getBranch();
      });

      function getBranch() {
         if (args.block) {
            console.log("Blocking until the build has been started... Ctrl-C exits, but won't stop the build")
         }
         var options = {
            tail: args.tail
         };
         if (args.branch) {
            triggerBuild(args.branch);
         } else {
            git.currentBranch(triggerBuild);
         }

         function triggerBuild(branch) {
            build.branch = branch;
            httpTrigger.injectBuild(build, args.port, options);
         }
      }
      break;

   case 'status':
      httpTrigger.getStatus(args.port, function(err, builds) {
         builds.building.forEach(function(build) {
            if (args.verbose) {
               build.building = true;
               console.dir(build);
            } else {
               console.log("* " + build.branch);
            }
         });
         builds.queued.forEach(function(build) {
            if (args.verbose) {
               console.dir(build);
            } else {
               console.log("  " + build.branch);
            }
         });
         if (builds.building.length == 0 && builds.queued.length == 0) {
            console.log("(no builds in queue)");
         }
      });
      break;

}

