#!/usr/bin/env node

var childProcess = require('child_process'),
httpTrigger    = require('../lib/http-trigger'),
Git            = require('../lib/git'),
ConfigProvider = require('../lib/config-provider'),
Cimpler        = require('../lib/cimpler'),
git            = new Git(),
build          = {},
args           = require('optimist')
   .demand(1)
   .usage("Examples:\n" +
   "   cimpler build [-b branch-name] [--commit commit-sha] trigger a build on the current repo\n" +
   "   cimpler build [-c command]                           trigger a build on the current repo with the specific command\n" +
   "   cimpler status                                       echo the list of builds in the queue (* means building)\n" +
   "   cimpler server [--config=path/config.js]             start the cimpler server. Logging to STDOUT.")
   .options('command', {
      alias: 'c',
      describe: 'Custom shell command to execute for this build instead of the one from the config file'
   })
   .options('config', {
      describe: 'specify the config file to use for any command (defaults to {project root}/config.js)'
   })
   .options('branch', {
      alias: 'b',
      describe: 'Name of the branch to build (defaults to current)'
   })
   .options('commit', {
      describe: 'Commit sha to build (defaults to most recent commit on the branch)'
   })
   .options('verbose', {
      alias: 'v',
      describe: 'Produce more output for the status command. Includes details for each build.'
   })
   .options('host', {
      alias: 'h',
      describe: 'HTTP host of the cimpler server (defaults to the value in config)'
   })
   .options('port', {
      alias: 'p',
      describe: 'HTTP port of the cimpler server (defaults to the value in config)'
   })
   .options('timeout', {
      alias: 't',
      describe: 'Specify the timeout for builds (in milliseconds)'
   }).argv;

var command = args._[0];

connectionOptions = {
   httpHost: args.host,
   httpPort: args.port
};

if (args.config) {
   var path = require('path');
   ConfigProvider.load(args.config);
}

switch (command) {
   case 'build':
      if (args.command) {
         build.buildCommand = args.command;
      }
      if (args.timeout) {
         build.buildTimeout = args.timeout;
      }
      git.remote(function(remote, repoPath) {
         if (remote && remote.indexOf('github.com') !== -1) {
            remote = Git.canonicalizeGithubUrl(remote);
         }
         build.repo = remote || repoPath;
         getBranch();
      });

      if (args.branch === true || args.commit === true) {
         require('optimist').showHelp();
         process.exit(1);
      }

      function getBranch() {
         if (args.commit) {
            build.commit = args.commit;
         }

         if (args.branch) {
            triggerBuild(args.branch);
         } else {
            git.currentBranch(triggerBuild);
         }

         function triggerBuild(branch) {
            build.branch = branch;
            httpTrigger.injectBuild(build, connectionOptions);
         }
      }
      break;

   case 'status':
      httpTrigger.getStatus(connectionOptions, function(err, builds) {
         if (args.verbose) {
            console.dir([].concat(builds.building, builds.queued));
            return;
         }
         builds.building.forEach(function(build) {
            console.log("* " + build.branch);
         });
         builds.queued.forEach(function(build) {
            console.log("  " + build.branch);
         });
         if (builds.building.length == 0 && builds.queued.length == 0) {
            console.log("(no builds in queue)");
         }
      });
      break;
   case 'server':
      cimpler = new Cimpler(ConfigProvider.get());
      break;
}
